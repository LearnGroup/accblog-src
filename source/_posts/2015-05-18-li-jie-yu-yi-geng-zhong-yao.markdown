---
layout: post
title: "理解语义更重要"
date: 2015-05-18 00:38:52 +0800
comments: true
categories: 随想
published: false
---

# 引言 #

昨天有朋自远方来，因为朋友是做前端的，于是乎想起了寝室大神曾经给我出的一个JavaScript问题，顺带着鄙视了一把，说：“如果你看不懂，那就说明你不懂JavaScript。”

问题是这样的：

```javascript
["10", "10", "10"].map(parseInt); 
// output: 10, NaN, 2
```

上面这段代码的输出看上去是如此的反人类，那么问题来了，这TM是为什么？相信很多写JavaScript的小伙伴们都会踩过这种坑。

“授之以鱼，不如授之以渔”，首先来一步一步的分析这个问题。

# 分析`map`和`parseInt`的行为 #

分析map的行为，我们可以用JavaScript中经典的`console.log`来实现，就是如下代码

```javascript
["10", "10", "10"].map(console.log); 
// [object Array][undefined, undefined, undefined]
// 10 0 10,10,10
// 10 1 10,10,10
// 10 2 10,10,10
```

从中，我们可以分析出，map函数的行为与我们以往的熟悉的“map”函数有所不同，以往我们熟悉的map函数所接收的函数应该只接收一个参数，即，有如下signature：

```javascript
function map_param_func(var1)
{
	// ...
}
```

然而这里的map的行为却等价于如下实现：

```javascript
function map(func)
{
	// src is the array
	var src = this, res = [], i;
	for (i = 0; i < src.length; ++i) {
		res.push(func(src[i], i, src));
	}
	return res;
}
```

不得不说，这里就已经觉得怪怪的了。但似乎还说不上来怎么不对。下面我们来看这个parseInt函数。他的signature应该如下所示：

```javascript
function parseInt(string, radix);
```

这样一看，我们就一目了然了，map函数的本意是每次调用映射函数时，把数组中arr[i]、数据序号i和数组本身都传入function，从而让function可以使用，然而，这里对于习惯了map通常语义的同学们，就会很想当然地把parseInt直接传入map函数，而忽略了parseInt本身接收了两个参数，而恰恰是第二个参数被parseInt误用，导致了上述奇怪的现象。

# 两种观点 #

那么通过上面的问题，我们就要开始这之中的问题了，大致可以归纳为以下两个观点：

1. 写代码的人太弱，没有掌握JavaScript的各种细节
2. JavaScript的设计太坑爹

支持观点(1)的人，我不能反驳他，因为在使用一门语言时，作为一名合格的程序员，当然应该了解这个语言的各种细节和特性。但是我同样不能支持他，因为你不能流氓到让所有人接受一个垃圾设计还不能抱怨。换句话说，我更倾向于第二种观点，即这是JavaScript的一个糟糕的设计！

也许你跟我有相同的观点，那么你可以接着往下读了。

虽然这是一个糟糕的设计，但这并不能成为我们抛弃JavaScript的理由，因为它远比这个败笔更重要，浏览器前端离不开JavaScript。那么问题来了，我们要如何面对这个我们从内心里就厌恶的糟糕的设计呢？通常也有两个观点：

1. 虽然他是shit，但是我们没有办法，只能继续吃（顿时整个人都不好了 -_-|||）
2. 既然他是shit，那么我们就弃用它，找个轮子替代这个蹩脚的设定；如果没有，那就自己造一个轮子。

我觉得在看到这两种观点的时候，很多人的心情是复杂的。因为第一种虽然丑陋，但是可以让你用最轻巧的方式解决问题（管他呢，任务完成就好）。选择第二种就需要一点勇气了，最好的情况是：你的项目多了一个需要维护的引用。最坏的情况就是找了一圈轮子发现同样有各种各样的坑，然后自己又不能忍受吃shit，然后踏上了漫漫的造轮子之路。作为一个理想主义者，当然我们还是更希望能够有足够的宽容让我们走不吃shit的路……

# 一个不错的轮子 #

正当我觉得在JavaScript如此流行的今天，一定会有一个顺手的轮子的时候，Google一下，你就知道！我找到了[underscorejs](http://underscorejs.org/)，快速锁定到map这个函数时，果然看到了我习惯的、并且几乎是common sense的map函数定义：

```javascript
_.map(list, iteratee, [context]) 
```

- 简述问题的分析过程
- 讨论JavaScript中不好的设计
	- var的设置等
- 对待上述问题有两种方式
	- 默默的接受这种坑，并且一直容忍他
	- 自己创建一套轮子，并且这个路子符合我们通常的语义，同时造福他人
	- 找到人家已经造好的轮子，好用就用，不好用就改进或者自己造
- 引用underscore.js说明在开发中理解语义并根据语义编程的重要性(能够增强可读性、减少坑或歧义)
- 又看到rust最近比较火，然后看了一下官网，也是吸收了很多、借鉴了很多
	- 设计语言本身就是一个依据一个实现指定好的哲学并进行实践的过程
